//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Uch_PracticeV3.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Text.RegularExpressions;

    public partial class Leader:IValidatableObject
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Leader()
        {
            this.Students = new HashSet<Student>();
        }
        
        [Display(Name="Код")]
        public int Id { get; set; }
        [Display(Name = "Фамилия")]
        [MaxLength(30)]
        [Required]
        public string Surname { get; set; }
        [Display(Name = "Имя")]
        [MaxLength(30)]
        [Required]
        public string Name { get; set; }
        [Display(Name = "Отчество")]
        [MaxLength(30)]
        public string Patronymic { get; set; }
        [Display(Name = "Код должности")]
        [Required]
        public int RankId { get; set; }
        [Display(Name = "Email")]
        [MaxLength(40)]
        public string Email { get; set; }
        [Display(Name = "Телефон")]
        [StringLength(11)]
        public string Phone { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Student> Students { get; set; }
        public virtual Rank Rank { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            List<ValidationResult> errors = new List<ValidationResult>();
            
            if(this.Email!=null && new Regex(@"^[A-Za-z]+@[A-Za-z]+\.ru$").Matches(this.Email).Count <= 0)
            {
                errors.Add(new ValidationResult("Email не соответствует шаблону"));
            }
            if (this.Phone!=null && new Regex(@"^89\d{9}$").Matches(this.Phone).Count <= 0)
            {
                errors.Add(new ValidationResult("Телефон не соответствует шаблону"));
            }

            return errors;
        }
    }
}
